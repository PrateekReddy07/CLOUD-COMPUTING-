#8 puzzle
import heapq

class PuzzleNode:
    def __init__(self, state, parent=None, move=None, cost=0):
        self.state = state
        self.parent = parent
        self.move = move
        self.cost = cost
        self.heuristic = self.calculate_heuristic()

    def __lt__(self, other):
        return (self.cost + self.heuristic) < (other.cost + other.heuristic)

    def __eq__(self, other):
        return self.state == other.state

    def calculate_heuristic(self):
        # Manhattan distance heuristic
        total_distance = 0
        goal_state = [[0, 1, 2], [3, 4, 5], [6, 7, 8]]
        for i in range(3):
            for j in range(3):
                value = self.state[i][j]
                if value != 0:
                    goal_position = divmod(value - 1, 3)
                    total_distance += abs(i - goal_position[0]) + abs(j - goal_position[1])
        return total_distance

def get_blank_position(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j

def generate_moves(i, j):
    moves = []
    if i > 0:
        moves.append((-1, 0))
    if i < 2:
        moves.append((1, 0))
    if j > 0:
        moves.append((0, -1))
    if j < 2:
        moves.append((0, 1))
    return moves

def apply_move(state, move):
    i, j = get_blank_position(state)
    new_state = [row.copy() for row in state]
    new_i, new_j = i + move[0], j + move[1]
    new_state[i][j], new_state[new_i][new_j] = new_state[new_i][new_j], new_state[i][j]
    return new_state

def is_goal_state(state):
    return state == [[1, 2, 3], [4, 5, 6], [7, 8, 0]]

def solve_puzzle(initial_state):
    open_set = [PuzzleNode(initial_state)]
    closed_set = set()

    while open_set:
        current_node = heapq.heappop(open_set)

        if is_goal_state(current_node.state):
            # Goal state found, reconstruct the path
            path = []
            while current_node:
                path.append(current_node.state)
                current_node = current_node.parent
            return path[::-1]

        closed_set.add(tuple(map(tuple, current_node.state)))

        i, j = get_blank_position(current_node.state)
        possible_moves = generate_moves(i, j)

        for move in possible_moves:
            new_state = apply_move(current_node.state, move)
            if tuple(map(tuple, new_state)) not in closed_set:
                new_node = PuzzleNode(new_state, current_node, move, current_node.cost + 1)
                heapq.heappush(open_set, new_node)

    return None  # No solution found

if __name__ == "__main__":
    initial_state = [
        [1, 2, 3],
        [4, 0, 5],
        [7, 8, 6]
    ]

    solution = solve_puzzle(initial_state)

    if solution:
        print("Solution:")
        for step, state in enumerate(solution):
            print(f"Step {step + 1}:")
            for row in state:
                print(row)
            print()
    else:
        print("No solution found.")

#8 queens
def is_safe(board, row, col):
    # Check if there is a queen in the same column
    for i in range(row):
        if board[i] == col or \
           board[i] - i == col - row or \
           board[i] + i == col + row:
            return False
    return True

def print_solution(board):
    for row in board:
        line = ['Q' if i == row else '.' for i in range(8)]
        print(' '.join(line))
    print("\n")

def solve_queens(board, row):
    if row == 8:
        # All queens are placed, print the solution
        print_solution(board)
        return

    for col in range(8):
        if is_safe(board, row, col):
            board[row] = col
            solve_queens(board, row + 1)
            board[row] = 0  # backtrack

def solve_8_queens():
    board = [0] * 8
    solve_queens(board, 0)

if __name__ == "__main__":
    solve_8_queens()

#A*algorithms
class Node():
    """A node class for A* Pathfinding"""
    def __init__(self, parent=None, position=None):
        self.parent = parent
        self.position = position
        self.g = 0
        self.h = 0
        self.f = 0
    def __eq__(self, other):
        return self.position == other.position
def astar(maze, start, end):
    """Returns a list of tuples as a path from the given start to the given end in the given maze"""
    start_node = Node(None, start)
    start_node.g = start_node.h = start_node.f = 0
    end_node = Node(None, end)
    end_node.g = end_node.h = end_node.f = 0
    open_list = []
    closed_list = []
    open_list.append(start_node)
    while len(open_list) > 0:
        current_node = open_list[0]
        current_index = 0
        for index, item in enumerate(open_list):
            if item.f < current_node.f:
                current_node = item
                current_index = index
        open_list.pop(current_index)
        closed_list.append(current_node)
        if current_node == end_node:
            path = []
            current = current_node
            while current is not None:
                path.append(current.position)
                current = current.parent
            return path[::-1]
        children = []
        for new_position in [(0, -1), (0, 1), (-1, 0), (1, 0), (-1, -1), (-1, 1), (1, -1), (1, 1)]: # Adjacent squares
            node_position = (current_node.position[0] + new_position[0], current_node.position[1] + new_position[1])
            if node_position[0] > (len(maze) - 1) or node_position[0] < 0 or node_position[1] > (len(maze[len(maze)-1]) -1) or node_position[1] < 0:
                continue
            if maze[node_position[0]][node_position[1]] != 0:
                continue
            new_node = Node(current_node, node_position)
            children.append(new_node)
        for child in children:
            for closed_child in closed_list:
                if child == closed_child:
                    continue
            child.g = current_node.g + 1
            child.h = ((child.position[0] - end_node.position[0]) ** 2) + ((child.position[1] - end_node.position[1]) ** 2)
            child.f = child.g + child.h
            for open_node in open_list:
                if child == open_node and child.g > open_node.g:
                    continue
            open_list.append(child)
def main():
    maze = [[0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
    start = (0, 0)
    end = (7, 6)
    path = astar(maze, start, end)
    print("the path is : ")
    print(path)
if __name__ == '__main__':
    main()

#BFS
graph = {
  '5' : ['3','7'],
  '3' : ['2', '4'],
  '7' : ['8'],
  '2' : [],
  '4' : ['8'],
  '8' : []
}
visited = [] 
queue = []  
def bfs(visited, graph, node):
  visited.append(node)
  queue.append(node)
  while queue:          
    m = queue.pop(0) 
    print (m, end = " ") 
    for neighbour in graph[m]:
      if neighbour not in visited:
        visited.append(neighbour)
        queue.append(neighbour)
print("Following is the Breadth-First Search")
bfs(visited, graph, '5')  

#DFS
class Graph:
    def __init__(self):
        self.graph = {}

    def add_edge(self, u, v):
        if u not in self.graph:
            self.graph[u] = []
        self.graph[u].append(v)

    def dfs(self, start, visited=None):
        if visited is None:
            visited = set()
        visited.add(start)
        print(start, end=' ')

        for neighbor in self.graph.get(start, []):
            if neighbor not in visited:
                self.dfs(neighbor, visited)

# Example usage:
if __name__ == "__main__":
    # Create a graph
    g = Graph()

    # Add edges
    g.add_edge(0, 1)
    g.add_edge(0, 2)
    g.add_edge(1, 2)
    g.add_edge(2, 0)
    g.add_edge(2, 3)
    g.add_edge(3, 3)

    print("DFS starting from vertex 2:")
    g.dfs(2)

#dob.pl
s% Facts representing the database with names and dates of birth
dob(john, date(1990, 5, 15)).
dob(susan, date(1985, 8, 23)).
dob(mike, date(1995, 2, 10)).
dob(lisa, date(1980, 11, 7)).

% Query to get the date of birth for a given person
get_dob(Person, DateOfBirth) :-
    dob(Person, DateOfBirth).

% Query to check if a person is born in a specific year
born_in_year(Person, Year) :-
    dob(Person, date(Year, _, _)).

% Query to check if a person is born in a specific month
born_in_month(Person, Month) :-
    dob(Person, date(_, Month, _)).



% get_dob(john, Date).
%born_in_year(susan, 1985).
%born_in_month(mike, 2).

#owns car.pl
owns(jack,car(bmw)).
owns(john,car(chevy)).
owns(olivia,car(civic)).
owns(jane,car(chevy)).

sedan(car(bmw)).
sedan(car(civic)).
sedan(car(chevy)).

#Travelling sales man(TSP)
from sys import maxsize 
from itertools import permutations
V = 4
def travellingSalesmanProblem(graph, s):     
	vertex = [] 
	for i in range(V): 
		if i != s: 
			vertex.append(i) 
	min_path = maxsize 
	next_permutation=permutations(vertex)
	for i in next_permutation:
		current_pathweight = 0
		k = s 
		for j in i: 
			current_pathweight += graph[k][j] 
			k = j 
		current_pathweight += graph[k][s] 
		min_path = min(min_path, current_pathweight) 
	return min_path 
if __name__ == "__main__": 

    
	graph = [[0, 10, 15, 20], [10, 0, 35, 25], 
			[15, 35, 0, 30], [20, 25, 30, 0]] 
	s = 0
	print("THE SHORTEST PATH IS : ")
	print(travellingSalesmanProblem(graph, s))

#Backword chaining
parent(john, mary).
parent(john, jim).
parent(mary, ann).
parent(mary, peter).

% Rule to define siblings
siblings(X, Y) :-
    parent(Z, X),
    parent(Z, Y),
    X \= Y.

% Backward chaining rule
ancestor(X, Y) :-
    parent(X, Y).
ancestor(X, Y) :-
    parent(X, Z),
    ancestor(Z, Y).

% Example query for backward chaining
% Is John an ancestor of Ann?
% ?- ancestor(john, ann).

#crypt arthematic
from itertools import permutations

def is_valid(puzzle, solution):
    # Check if the solution satisfies the puzzle
    puzzle_letters = set(''.join(puzzle))
    solution_letters = set(solution.keys())
    
    if len(puzzle_letters) != len(solution_letters):
        return False

    for word in puzzle:
        if word[0] in solution:
            if solution[word[0]] == '0':
                return False

    left_operand = ''.join(solution[c] for c in puzzle[0])
    right_operand = ''.join(solution[c] for c in puzzle[2])
    result = ''.join(solution[c] for c in puzzle[4])

    return int(left_operand) + int(right_operand) == int(result)

def solve_cryptarithmetic(puzzle):
    # Extract unique letters from the puzzle
    letters = set(''.join(puzzle))

    # Generate all possible permutations of digits from 0 to 9 for the letters
    for perm in permutations("0123456789", len(letters)):
        solution = dict(zip(letters, perm))
        
        if is_valid(puzzle, solution):
            return solution

    return None

if __name__ == "__main__":
    # Example cryptarithmetic puzzle: SEND + MORE = MONEY
    puzzle = ["SEND", "MORE", "MONEY"]

    solution = solve_cryptarithmetic(puzzle)

    if solution:
        print("Solution found:")
        for word in puzzle:
            print(''.join(solution[c] for c in word), end=" ")
    else:
        print("No solution found.")

#medical
% Facts representing diseases and associated diets
diet_suggestion(heart_disease, low_fat).
diet_suggestion(diabetes, low_carb).
diet_suggestion(hypertension, low_salt).
diet_suggestion(cholesterol, low_cholesterol).

% Rule to suggest a diet based on a given disease
suggest_diet(Person, Disease, Diet) :-
    has_disease(Person, Disease),
    diet_suggestion(Disease, Diet),
    write('For '), write(Person), write(' with '), write(Disease),
    write(' we suggest a '), write(Diet), write(' diet.'),
    nl.

% Example facts representing individuals and their diseases
has_disease(john, heart_disease).
has_disease(susan, diabetes).
has_disease(mike, hypertension).

% Example queries
% What diet to suggest for John with heart disease?
% ?- suggest_diet(john, heart_disease, Diet).
%
% What diet to suggest for Susan with diabetes?
% ?- suggest_diet(susan, diabetes, Diet).

#family.pl
male(A). 
female(B).

male(C).
male(D).

parent(B,C).
parent(A,D).

mother(X,Y):-parent(X,Y),female(X).
father(X,Y):-parent(X,Y),male(Y).
sister(X,Y):-parent(Z,X),parent(Z,Y),female(X),X\==Y.
brother(X,Y):-parents(Z,X),parent(Z,Y),male(X),X\==Y.

#fly or not

% Facts about birds and whether they can fly
can_fly(robin).
can_fly(sparrow).
can_fly(eagle).
can_fly(penguin) :- false. % Penguins cannot fly.

% Query to check if a bird can fly
fly_ability(Bird) :-
    can_fly(Bird),
    write(Bird), write(' can fly.'),
    nl.

fly_ability(Bird) :-
    \+ can_fly(Bird),
    write(Bird), write(' cannot fly.'),
    nl.
%fly_ability(robin).
% Example queries
:- fly_ability(robin).
:- fly_ability(penguin).

#food.pl

% Facts about birds and whether they can fly
can_fly(robin).
can_fly(sparrow).
can_fly(eagle).
can_fly(penguin) :- false. % Penguins cannot fly.

% Query to check if a bird can fly
fly_ability(Bird) :-
    can_fly(Bird),
    write(Bird), write(' can fly.'),
    nl.

fly_ability(Bird) :-
    \+ can_fly(Bird),
    write(Bird), write(' cannot fly.'),
    nl.
%fly_ability(robin).
% Example queries
:- fly_ability(robin).
:- fly_ability(penguin).

#fruits colouring
fruit_color(apple, red).
fruit_color(banana, yellow).
fruit_color(grape, purple).
fruit_color(orange, orange).
fruit_color(watermelon, green).

% Query to find fruits with a specific color
fruit_with_color(Color, Fruit) :-
    fruit_color(Fruit, Color).

% Example queries
% Find fruits that are red
% ?- fruit_with_color(red, Fruit).
%
% Find the color of an apple
% ?- fruit_color(apple, Color).

#canibal
from collections import deque
initial_state = (3, 3, 1) 
goal_state = (0, 0, 0)
def generate_moves(state):
    moves = []
    ml, cl, boat = state
    for m in range(3):
        for c in range(3):
            if 1 <= m + c <= 2:
                if (ml - m >= 0 and cl - c >= 0) or (ml + m <= 3 and cl + c <= 3):
                    new_state = (ml - m, cl - c, 1 - boat)
                    if (0 <= new_state[0] <= 3) and (0 <= new_state[1] <= 3):
                        moves.append(new_state)
    return moves
def is_valid(state):
    ml, cl, _ = state
    if (ml == 0 or ml >= cl) and (3 - ml == 0 or 3 - ml >= 3 - cl):
        return True
    return False
def solve_missionaries_and_cannibals(initial_state, goal_state):
    visited = set()
    queue = deque([(initial_state, [])])
    while queue:
        current_state, path = queue.popleft()
        if current_state == goal_state:
            return path
        if current_state not in visited and is_valid(current_state):
            visited.add(current_state)
            for move in generate_moves(current_state):
                queue.append((move, path + [move]))
    return None
solution = solve_missionaries_and_cannibals(initial_state, goal_state)
if solution:
    print("Solution path:")
    for step, state in enumerate(solution):
        print(f"Step {step + 1}: Missionaries={state[0]}, Cannibals={state[1]}, Boat={state[2]}")
else:
    print("No solution found.")

#monkey banana.pl
on(floor, monkey). on(floor, chair). in(room,monkey). in(room, chair). in(room,banana). at(ceiling, banana).
strong(monkey). grasp(monkey).
climb(monkey, chair).
push(monkey,chair):-strong(monkey).
under(banana, chair): - push(monkey,chair).
canreach(banana,monkey): -
at(floor,banana);
at(ceiling,banana), under(banana, chair), climb(monkey, chair).
canget(banana,monkey): -
canreach (banana,monkey), grasp(monkey).

#orbit
orbits(mercury,sun).
orbits(venus,sun).
orbits(earth,sun).
orbits(mars,sun).
orbits(moon, earth).
orbits(phobos, mars).
orbits(deimos, mars).
planet(P) :- orbits(P,sun).
satellite(S) :- orbits(S,P), planet(P).

#pet.pl
cat(fubby).
black_spots(fubby).
dog(figaro).
white_spots(figaro).

owns(mary,Pet):-cat(Pet),black_spots(Pet).
loves(Who,What):-owns(Who,What).
#Student.pl
studies(charlie, csc135). 
studies(olivia, csc135). 
studies(jack, csc131). 
studies(arthur, csc134). 

teaches(kirke, csc135). 
teaches(collins, csc131). 
teaches(collins, csc171). 
teaches(juniper, csc134).

professor(X, Y) :- teaches(X, C),
studies(Y,C).
#Sum of integer
sum_integers(0, 0).

sum_integers(N, Sum) :-
    N > 0,
    N1 is N - 1,
    sum_integers(N1, Sum1),
    Sum is N + Sum1.

intax=aggregate(sum(N),between(0,10,N),S).

#tower of hanoi
% Rules to solve Towers of Hanoi
hanoi(1, Source, Target, _, Moves) :-
    write('Move disk 1 from '), write(Source), write(' to '), writeln(Target),
    Moves = 1.

hanoi(N, Source, Target, Auxiliary, Moves) :-
    N > 1,
    N1 is N - 1,
    hanoi(N1, Source, Auxiliary, Target, Moves1),
    write('Move disk '), write(N), write(' from '), write(Source), write(' to '), writeln(Target),
    hanoi(N1, Auxiliary, Target, Source, Moves2),
    Moves is Moves1 + 1 + Moves2.
syntax=hanoi(N, Source, Target, Auxiliary, Moves)  ##cange N

#vacume cleaner
class VacuumCleaner:
    def __init__(self, grid):
        self.grid = grid
        self.position = (0, 0)  # Initial position of the vacuum cleaner

    def print_grid(self):
        for row in self.grid:
            print(" ".join(row))
        print()

    def is_dirty(self, position):
        return self.grid[position[0]][position[1]] == 'D'

    def clean(self, position):
        self.grid[position[0]][position[1]] = '-'

    def move_left(self):
        self.position = (self.position[0], max(0, self.position[1] - 1))

    def move_right(self):
        self.position = (self.position[0], min(len(self.grid[0]) - 1, self.position[1] + 1))

    def move_up(self):
        self.position = (max(0, self.position[0] - 1), self.position[1])

    def move_down(self):
        self.position = (min(len(self.grid) - 1, self.position[0] + 1), self.position[1])

    def clean_environment(self):
        while any('D' in row for row in self.grid):
            self.print_grid()
            if self.is_dirty(self.position):
                print(f"Cleaning {self.position}")
                self.clean(self.position)
            else:
                print(f"Moving to {self.position}")

            # Move to the next dirty cell
            if any('D' in row for row in self.grid):
                if self.position[1] < len(self.grid[0]) - 1 and 'D' in self.grid[self.position[0]]:
                    self.move_right()
                elif self.position[0] < len(self.grid) - 1 and 'D' in [row[self.position[1]] for row in self.grid]:
                    self.move_down()
                elif self.position[1] > 0 and 'D' in self.grid[self.position[0]]:
                    self.move_left()
                elif self.position[0] > 0 and 'D' in [row[self.position[1]] for row in self.grid]:
                    self.move_up()


# Example usage:
if __name__ == "__main__":
    # Define the environment grid (D represents dirty cells)
    grid = [
        ['D', '-', 'D', '-'],
        ['-', 'D', '-', 'D'],
        ['D', '-', '-', '-']
    ]

    vacuum_cleaner = VacuumCleaner(grid)
    vacuum_cleaner.clean_environment()

#waterjug
from queue import Queue

def water_jug_problem(capacity_a, capacity_b, target):
    visited_states = set()
    initial_state = (0, 0)

    queue = Queue()
    queue.put(initial_state)
    visited_states.add(initial_state)

    while not queue.empty():
        current_state = queue.get()
        jug_a, jug_b = current_state

        if jug_a == target or jug_b == target:
            print("Solution found:", current_state)
            return

        # Fill jug A
        next_state = (capacity_a, jug_b)
        if next_state not in visited_states:
            queue.put(next_state)
            visited_states.add(next_state)

        # Fill jug B
        next_state = (jug_a, capacity_b)
        if next_state not in visited_states:
            queue.put(next_state)
            visited_states.add(next_state)

        # Empty jug A
        next_state = (0, jug_b)
        if next_state not in visited_states:
            queue.put(next_state)
            visited_states.add(next_state)

        # Empty jug B
        next_state = (jug_a, 0)
        if next_state not in visited_states:
            queue.put(next_state)
            visited_states.add(next_state)

        # Pour water from jug A to jug B
        pour_amount = min(jug_a, capacity_b - jug_b)
        next_state = (jug_a - pour_amount, jug_b + pour_amount)
        if next_state not in visited_states:
            queue.put(next_state)
            visited_states.add(next_state)

        # Pour water from jug B to jug A
        pour_amount = min(jug_b, capacity_a - jug_a)
        next_state = (jug_a + pour_amount, jug_b - pour_amount)
        if next_state not in visited_states:
            queue.put(next_state)
            visited_states.add(next_state)

    print("Solution not found")

# Example usage:
water_jug_problem(4, 3, 2)

#html
<!DOCTYPE html>

<html>

    <head> 
         <title>My web page</title> 
     </head> 
     <body>
        <h1>Hello, world!</h1> 
         <p>This is my first web page.</p> 
         <a href="https://www.amazon.in">Open Amazon</a>
         <p>It contains a 
             <strong>main heading</strong> and <em> paragraph </em>.
        </p>

    </body> 
</html>